u
u
u
r
t
l t
l up
l b
l
q
b strStr
set args "hello" "o"
r
n
l
list
list begin
l
list top
q
file 28.o
q
b longestCommonPrefix(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) 
r
n
n
n
q
b isPalidrome(ListNode*) 
r
n
q
b sumOfLeftLeaves(TreeNode*) 
r
n
q
b main
r
n
r
n
q
b lengthOfLongestSubstring(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) 
r
n
n
p str
n
p str[j]
p s
n
p s
n
q
b threeSumClosest(std::vector<int, std::allocator<int> >&, int) 
r
n
p res
n
n
n
p re
sp res
p res
n
n
r
n
q
b generatePermutation(std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, std::vector<bool, std::allocator<bool> >&) 
r
n
n
n
n
q
b generatePermutation(std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, std::vector<bool, std::allocator<bool> >&) 
r
q
q
b generatePermutation(std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, std::vector<bool, std::allocator<bool> >&) 
r
l
q
b main
b generatePermutation(std::vector<int, std::allocator<int> >, int, std::vector<int, std::allocator<int> >, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, std::vector<bool, std::allocator<bool> >&) 
r
n
n
p permute(std::vector<int, std::allocator<int> >&) 
n
l
u
q
b uniquePathsWithObstacles(std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&) 
r
n
p dp
q
b havehalt(std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&) 
r
r
q
b havehalt(std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&) 
r
n
q
b havehalt(std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&) 
r
n
q
b havehalt(std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&) 
r
n
n
p obstacleGrid 
n
q
b main
r
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
n
q
b main
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
r
n
r
n
p input
n
p input
n
p lists
p lists[0]
p lists.empty()
n
q
b main
b mergek
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
r
n
b picksmallest(std::vector<ListNode*, std::allocator<ListNode*> >&, int&, ListNode*, ListNode*) 
n
p result
p head
p node
n
n
q
b main
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
r
n
b picksmallest(std::vector<ListNode*, std::allocator<ListNode*> >&, int&, ListNode*, ListNode*) 
n
q
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
b picksmallest(std::vector<ListNode*, std::allocator<ListNode*> >&, int&, ListNode*, ListNode*) 
r
n
p smallest 
n
p node
p head
q
q
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
b picksmallest(std::vector<ListNode*, std::allocator<ListNode*> >&, int&, ListNode*, ListNode*) 
r
n
p lists[0]
p lists[1]
p lists[2]
n
n
n
p result
q
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
b picksmallest(std::vector<ListNode*, std::allocator<ListNode*> >&, int&, ListNode*, ListNode*) 
r
n
q
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
b picksmallest(std::vector<ListNode*, std::allocator<ListNode*> >&, int&, ListNode*, ListNode*) 
r
n
q
b mergek
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
b picksmallest(std::vector<ListNode*, std::allocator<ListNode*> >&, int&, ListNode*, ListNode*) 
r
n
n
p result
q
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
b picksmallest(std::vector<ListNode*, std::allocator<ListNode*> >&, int&, ListNode*, ListNode*) 
r
n
p result
n
q
b mergek
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
b picksmallest(std::vector<ListNode*, std::allocator<ListNode*> >&, int&, ListNode*, ListNode*) 
r
n
q
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
b picksmallest(std::vector<ListNode*, std::allocator<ListNode*> >&, int&, ListNode*, ListNode*) 
r
n
p result
n
p result
n
p node
p node->next
p *(node->next)
p node->next->next
n
q
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
r
n
r
n
p lists
n
q
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
r
n
q
b mergeKLists(std::vector<ListNode*, std::allocator<ListNode*> >&) 
r
n
p head
n
p flags[n]
n
p flags[n]
p n
p flags[n]->next->next
q
b nextPermutation(std::vector<int, std::allocator<int> >&) 
r
n
q
b nextPermutation(std::vector<int, std::allocator<int> >&) 
r
n
q
